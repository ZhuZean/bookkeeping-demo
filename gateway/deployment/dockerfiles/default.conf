resolver kube-dns.kube-system.svc.cluster.local valid=5s;

server {
    listen 80;
    # server_name ~^api(\..+)?\.zean\.pro$;
    server_name api.minikube.zean.pro;
    client_max_body_size 128K;
    keepalive_timeout 20;
    proxy_buffers 30 32k;
    proxy_buffer_size 32k;

    # location / {
    #     return 200;
    # }

    # CORS Settings
    set $cors "true";

    # Always set CORS for demo website
    if ($host = "demo.zean.pro") {
        set $cors "true";
    }

    # Nginx doesn't support nested If statements. This is where things get slightly nasty.
    # Determine the HTTP request method used
    if ($request_method = 'GET') {
        set $cors "${cors}get";
    }
    if ($request_method = 'POST') {
        set $cors "${cors}post";
    }
    if ($request_method = 'PATCH') {
        set $cors "${cors}patch";
    }
    if ($request_method = 'DELETE') {
        set $cors "${cors}delete";
    }
    if ($request_method = 'OPTIONS') {
        set $cors "${cors}options";
    }

    # Services
    location ^~ /bill {
        if ($cors = "trueget") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
	    }
        if ($cors = "truepost") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
        }
        if ($cors = "trueoptions") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
            return 204;
        }
        set $upstream http://api.bill-svc.svc.cluster.local:80;
        fastcgi_pass $upstream;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass $upstream;
    }
}

server {
    listen 80;
    # server_name ~^demo(\..+)?\.zean\.pro$;
    server_name demo.minikube.zean.pro;
    client_max_body_size 104857600;
    keepalive_timeout 10;
    proxy_buffers 30 32k;
    proxy_buffer_size 32k;

    # Service
    location / {
        set $upstream http://web.web-svc.svc.cluster.local:80;
        fastcgi_pass $upstream;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass $upstream;
    }
}